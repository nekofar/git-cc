#!/usr/bin/env bash

# enable strict mode
set -euo pipefail
IFS=$'\n\t'

msg_type="chore"
msg_subject=""
msg_scope=""
msg_body=""
msg_breaking=""

dry_run=false

usage() {
  echo 1>&2 "usage: git cc --subject <subject>"
  echo 1>&2 "   or: git cc --subject <subject> [<options>]"
  echo 1>&2 ""
  echo 1>&2 "    --subject <subject>    subject is a short summary of the code changes"
  echo 1>&2 "    --type <type>          prefix subject with a type, which consists of a noun, feat, fix, etc"
  echo 1>&2 "    --scope <scope>        a noun describing a section of the codebase"
  echo 1>&2 "    --body <body>          additional contextual information about the code changes"
  echo 1>&2 "    --breaking <breaking>  introduces a breaking API change"
  echo 1>&2 ""
  echo 1>&2 "    --dry-run              show what would have been committed"
  echo 1>&2 ""
}

concat() {
  # put everything together
  subject="${msg_type}$([[ -n "${msg_scope}" ]] && printf "(%s)" "${msg_scope}"): ${msg_subject}"
  message="$([[ -n "${msg_body}" ]] && printf "\n\n%s" "${msg_body}")"
  footers=("$([[ -n "${msg_breaking}" ]] && printf "\n\nBREAKING CHANGE: %s" "${msg_breaking}")")

  echo "${subject}${message}${footers[*]}"
}

prompt() {
  read -r -p 'type? ' msg_type
  read -r -p 'subject? ' msg_subject
  read -r -p 'scope? ' msg_scope
  read -r -p 'body? ' msg_body
  read -r -p 'breaking? ' msg_breaking
}

while [ "${#}" -ge 1 ]; do
  case "$1" in
  --type)
    msg_type="$2"
    ;;
  --subject)
    msg_subject="$2"
    ;;
  --scope)
    msg_scope="$2"
    ;;
  --body)
    msg_body="$2"
    ;;
  --breaking)
    msg_breaking="$2"
    ;;
  --dry-run)
    dry_run=true
    ;;
  --interactive)
    prompt
    ;;
  --help | -h | help)
    usage && exit 0
    ;;
  --*)
    echo 1>&2 "error: unknown option \`$1'" && usage && exit 1
    ;;
  -*)
    echo 1>&2 "error: unknown switch \`$1'" && usage && exit 1
    ;;
  esac && shift
done

# check if subject provided
[[ -z "${msg_subject}" ]] && echo 1>&2 "fatal: subject must be provided" && usage && exit 1

# print out commit on dry-run
if ($dry_run); then
  concat && exit 0
else
  git commit -m "$(concat)"
fi
